{"version":3,"sources":["Counter/Counter.module.css","Counter/Display/Display.tsx","Counter/Button/Button.tsx","Counter/Buttons/Buttons.tsx","Counter/Counter.tsx","Counter/Input/Input.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","className","count","maxValue","s","display","Button","button","disabled","onClick","title","Buttons","buttons","changeHandler","startValue","resetHandler","Counter","wrapper","setCount","Input","input_wrapper","input","type","onChange","App","useState","setMaxValue","setStartValue","megaWrapper","e","newStartValue","currentTarget","value","newMaxValue","button_wrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,YAAc,6BAA6B,QAAU,yBAAyB,QAAU,yBAAyB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,wBAAwB,cAAgB,+BAA+B,MAAQ,uBAAuB,eAAiB,kC,mKCO9TC,EAAU,SAACC,GACpB,OACI,qBAAKC,UAAYD,EAAME,QAAUF,EAAMG,SAAWC,IAAED,SAAWC,IAAEC,QAAjE,SACI,8BAAML,EAAME,WCFXI,EAAS,SAACN,GACnB,OACI,wBAAQC,UAAWG,IAAEG,OAAQC,SAAUR,EAAMQ,SAAUC,QAAST,EAAMS,QAAtE,SAAgFT,EAAMU,SCCjFC,EAAU,SAACX,GAEpB,OACI,sBAAKC,UAAWG,IAAEQ,QAAlB,UACI,cAAC,EAAD,CAAQF,MAAO,MAAOF,SAAUR,EAAME,OAASF,EAAMG,SAAUM,QAAST,EAAMa,gBAC9E,cAAC,EAAD,CAASH,MAAO,QAASF,SAAUR,EAAME,QAAUF,EAAMc,WAAYL,QAAST,EAAMe,mBCLnFC,EAAU,SAAChB,GAYpB,OACI,sBAAKC,UAAWG,IAAEa,QAAlB,UACI,cAAC,EAAD,CAASd,SAAUH,EAAMG,SAAUD,MAAOF,EAAME,QAChD,cAAC,EAAD,CAASC,SAAUH,EAAMG,SAAUW,WAAYd,EAAMc,WAAYZ,MAAOF,EAAME,MAAOW,cAbvE,WACfb,EAAME,MAAQF,EAAMG,UACnBH,EAAMkB,SAASlB,EAAME,MAAQ,IAWsFa,aAPtG,WACjBf,EAAMkB,SAASlB,EAAMc,mBCbhBK,EAAQ,SAACnB,GAClB,OACI,sBAAKC,UAAWG,IAAEgB,cAAlB,UACI,+BAAOpB,EAAMU,QACb,uBAAOT,UAAWG,IAAEiB,MAAOC,KAAK,SAASC,SAAUvB,EAAMuB,eCuCtDC,MA3Cf,WAAgB,IAAD,EAEmBC,mBAAiB,GAFpC,mBAENtB,EAFM,KAEIuB,EAFJ,OAGuBD,mBAAiB,GAHxC,mBAGNX,EAHM,KAGMa,EAHN,OAIaF,mBAAiBX,GAJ9B,mBAINZ,EAJM,KAICgB,EAJD,KAqBX,OACI,sBAAKjB,UAAWG,IAAEwB,YAAlB,UAEI,sBAAK3B,UAAWG,IAAEa,QAAlB,UACI,gCACI,cAAC,EAAD,CAAOP,MAAO,gBAAiBa,SAfzB,SAACM,GACnB,IAAMC,GAAiBD,EAAEE,cAAcC,MACvCL,EAAcG,MAcF,cAAC,EAAD,CAAOpB,MAAO,cAAea,SArBzB,SAACM,GACjB,IAAMI,GAAeJ,EAAEE,cAAcC,MACrCN,EAAYO,SAqBJ,qBAAKhC,UAAWG,IAAE8B,eAAlB,SACI,cAAC,EAAD,CAAQxB,MAAO,MAAOF,UAAU,EAAOC,QAdlC,WACjBS,EAASJ,WAkBL,cAAC,EAAD,CAASX,SAAUA,EACVW,WAAYA,EACZZ,MAAOA,EACPgB,SAAUA,QChChBiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.69da6f66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"megaWrapper\":\"Counter_megaWrapper__cIyCI\",\"wrapper\":\"Counter_wrapper__3voZu\",\"display\":\"Counter_display__2Ppao\",\"maxValue\":\"Counter_maxValue__11zX7\",\"buttons\":\"Counter_buttons__3kAdR\",\"button\":\"Counter_button__31X4Y\",\"input_wrapper\":\"Counter_input_wrapper__3kIkc\",\"input\":\"Counter_input__26MxT\",\"button_wrapper\":\"Counter_button_wrapper__QItyz\"};","import React from \"react\";\r\nimport s from '../Counter.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n    return(\r\n        <div className={ props.count === props.maxValue ? s.maxValue : s.display}>\r\n            <div>{props.count}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../Counter.module.css\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    disabled: boolean\r\n    onClick: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return(\r\n        <button className={s.button} disabled={props.disabled} onClick={props.onClick}>{props.title}</button>\r\n    )\r\n}","import React from \"react\";\r\nimport s from '../Counter.module.css'\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype ButtonsPropsType = {\r\n    count: number\r\n    changeHandler: () => void\r\n    resetHandler: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nexport const Buttons = (props: ButtonsPropsType) => {\r\n    // @ts-ignore\r\n    return (\r\n        <div className={s.buttons}>\r\n            <Button title={'inc'} disabled={props.count >= props.maxValue} onClick={props.changeHandler}/>\r\n            <Button  title={'reset'} disabled={props.count === props.startValue} onClick={props.resetHandler} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Display} from \"./Display/Display\";\r\nimport {Buttons} from \"./Buttons/Buttons\";\r\nimport s from './Counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    count: number\r\n    setCount: (value:any) => void\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n    const changeHandler = () => {\r\n        if(props.count < props.maxValue) {\r\n            props.setCount(props.count + 1)\r\n        }\r\n    }\r\n\r\n    const resetHandler = () => {\r\n        props.setCount(props.startValue)\r\n    }\r\n\r\n    return(\r\n        <div className={s.wrapper}>\r\n            <Display maxValue={props.maxValue} count={props.count}/>\r\n            <Buttons maxValue={props.maxValue} startValue={props.startValue} count={props.count} changeHandler={changeHandler} resetHandler={resetHandler}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from '../Counter.module.css'\r\n\r\ntype InputPropsType = {\r\n    title: string\r\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    return(\r\n        <div className={s.input_wrapper}>\r\n            <span>{props.title}</span>\r\n            <input className={s.input} type=\"number\" onChange={props.onChange}/>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\nimport {Button} from \"./Counter/Button/Button\";\nimport {Input} from \"./Counter/Input/Input\";\nimport s from './Counter/Counter.module.css'\n\n\nfunction App() {\n\n    let [maxValue, setMaxValue] = useState<number>(0);\n    let [startValue, setStartValue] = useState<number>(0)\n    let [count, setCount] = useState<number>(startValue)\n\n    const addMaxValue = (e: React.FormEvent<HTMLInputElement>) => {\n        const newMaxValue = +e.currentTarget.value;\n        setMaxValue(newMaxValue)\n    }\n\n    const addStartValue = (e: React.FormEvent<HTMLInputElement>) => {\n        const newStartValue = +e.currentTarget.value;\n        setStartValue(newStartValue)\n    }\n\n    const restartCount = () => {\n        setCount(startValue)\n    }\n\n\n    return (\n        <div className={s.megaWrapper}>\n\n            <div className={s.wrapper}>\n                <div>\n                    <Input title={'start value: '} onChange={addStartValue}/>\n                    <Input title={'max value: '} onChange={addMaxValue}/>\n                </div>\n                <div className={s.button_wrapper}>\n                    <Button title={'set'} disabled={false} onClick={restartCount}/>\n                </div>\n            </div>\n\n\n            <Counter maxValue={maxValue}\n                     startValue={startValue}\n                     count={count}\n                     setCount={setCount}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}